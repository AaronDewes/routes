[
  {
    "name": "Get a Tree",
    "method": "GET",
    "path": "/repos/:owner/:repo/git/trees/:sha",
    "description": "If `truncated` is `true`, the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, you can clone the repository and iterate over the Git data locally.",
    "params": [],
    "enabledForApps": true,
    "documentationUrl": "https://developer.github.com/v3/git/trees/#get-a-tree"
  },
  {
    "name": "Get a Tree Recursively",
    "method": "GET",
    "path": "/repos/:owner/:repo/git/trees/:sha?recursive=1",
    "description": "If `truncated` is `true`, the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.",
    "params": [],
    "enabledForApps": false,
    "documentationUrl": "https://developer.github.com/v3/git/trees/#get-a-tree-recursively"
  },
  {
    "name": "Create a Tree",
    "method": "POST",
    "path": "/repos/:owner/:repo/git/trees",
    "description": "The tree creation API will take nested entries as well. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out.\n\nThe `tree` parameter takes the following keys:",
    "params": [
      {
        "name": "tree",
        "type": "array of objects",
        "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure",
        "required": true
      },
      {
        "name": "base_tree",
        "type": "string",
        "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
        "required": false
      }
    ],
    "enabledForApps": true,
    "documentationUrl": "https://developer.github.com/v3/git/trees/#create-a-tree"
  }
]